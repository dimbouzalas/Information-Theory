import random
from ipywidgets import FloatText, IntText, Text, Button, VBox, HBox, Label, Output
from IPython.display import display, FileLink, clear_output

def generate_clauses(k, n_vars, n_clauses, var_offset=0):

    clauses = []
    var_ids = list(range(var_offset+1, var_offset + n_vars + 1))
    for _ in range(n_clauses):
        chosen = random.sample(var_ids, k)
        lits = [v if random.choice([True, False]) else -v for v in chosen]
        clauses.append(lits)
    return clauses
r2, r3, r4, r5 = (
    FloatText(1.0, description='r₂:'),
    FloatText(4.2, description='r₃:'),
    FloatText(8.0, description='r₄:'),
    FloatText(10.5,description='r₅:')
)
N       = IntText(150, description='N (vars):')
out_fn  = Text('mixed.cnf', description='Output fn:')
btn     = Button(description='Generate CNF', button_style='success')
output_area = Output()

def on_click(b):
    output_area.clear_output()
    # compute clause counts
    m2 = int(round(r2.value * N.value))
    m3 = int(round(r3.value * N.value))
    m4 = int(round(r4.value * N.value))
    m5 = int(round(r5.value * N.value))
    
    
    all_clauses = []
    for k, m in ((2, m2), (3, m3), (4, m4), (5, m5)):
        all_clauses += generate_clauses(k, N.value, m, var_offset=0)

    
    with open(out_fn.value, 'w') as f:
        for clause in all_clauses:
            f.write(" ".join(str(l) for l in clause) + " 0\n")

    
    with output_area:
        display(Label(f"Wrote {len(all_clauses)} clauses → “{out_fn.value}”"))
        display(FileLink(out_fn.value))

btn.on_click(on_click)


ui = VBox([
    HBox([r2, r3, r4, r5]),
    HBox([N, out_fn]),
    btn,
    output_area
])
display(ui)
