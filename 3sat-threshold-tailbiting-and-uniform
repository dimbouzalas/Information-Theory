import random
import numpy as np
import matplotlib.pyplot as plt
from pysat.solvers import Glucose3
from collections import defaultdict
from joblib import Parallel, delayed
from tqdm.notebook import tqdm


ratios      = np.linspace(3.8, 4.8, 50)
n_vars      = 100            
n_instances = 100            
repeats     = 5
n_jobs      = 8

# SC parameters: ensure L * n == n_vars
L           = 10             
n           = 10             
w           = 4             
anchor_b    = 2             
bias_strength = 1.5          

assert L * n == n_vars, 

def generate_uniform_3sat(n_vars, r):
    m = int(r * n_vars)
    S = set()
    while len(S) < m:
        vs = random.sample(range(1, n_vars+1), 3)
        lits = tuple(sorted(v * random.choice([-1,1]) for v in vs))
        S.add(lits)
    return [list(c) for c in S]

def generate_tailbiting_sc_3sat(L, n, r, w, anchor_b, bias_strength):
    N = L*n
    M = int(r * N)
    clauses = []
    for _ in range(M):
        # pick a center block uniform
        center = random.randrange(L)
        window = [ (center + d) % L for d in range(w) ]

       
        weights = np.exp(-bias_strength * np.arange(w))
        weights /= weights.sum()
        blocks = random.choices(window, weights=weights, k=3)

      
        while True:
            vs = [ random.randrange(b*n, (b+1)*n) for b in blocks ]
            if len(set(vs)) == 3:
                break

    
        lits = [ (v+1) * random.choice([-1,1]) for v in vs ]


        if center < anchor_b or center >= L - anchor_b:
            lits[0] = abs(lits[0])

        clauses.append(lits)
    return clauses



def solve_glucose(clauses):
    s = Glucose3()
    s.append_formula(clauses)
    ok = s.solve()
    s.delete()
    return ok

def solve_uniform(r):
    return solve_glucose( generate_uniform_3sat(n_vars, r) )

def solve_sc(r):
    return solve_glucose(
        generate_tailbiting_sc_3sat(L, n, r, w, anchor_b, bias_strength)
    )



def run_experiment(label, solver_fn):
    print(f"\n {label}")
    data = defaultdict(list)
    for rep in range(1, repeats+1):
        print(f" Repeat {rep}/{repeats}")
        for r in tqdm(ratios, desc=f"   {label}"):
            outs = Parallel(n_jobs=n_jobs)(
                delayed(solver_fn)(r) for _ in range(n_instances)
            )
            frac = sum(outs)/n_instances
            data[r].append(frac)
    return data


def plot_results(unif, sc):
    mu_u = [np.mean(unif[r]) for r in ratios]
    sd_u = [np.std (unif[r]) for r in ratios]
    mu_s = [np.mean(sc[r])  for r in ratios]
    sd_s = [np.std (sc[r])  for r in ratios]

    plt.figure(figsize=(12,6))
    plt.errorbar(ratios, mu_u, yerr=sd_u, fmt='o-', capsize=4, label='Uniform 3-SAT')
    plt.errorbar(ratios, mu_s, yerr=sd_s, fmt='x-', capsize=4, label='SC 3-SAT (Tailbiting)')
    plt.axvline(4.26, color='red', linestyle='--', label='Theory râ‰ˆ4.26')
    plt.xlabel("Clause-to-Variable Ratio (r)")
    plt.ylabel("Fraction Satisfiable")
    plt.title("3-SAT Phase Transition: Glucose vs SC Tailbiting")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()


if __name__=="__main__":
    uniform_data = run_experiment("Uniform 3-SAT", solve_uniform)
    sc_data      = run_experiment("SC 3-SAT (Tailbiting)", solve_sc)
    plot_results(uniform_data, sc_data)
